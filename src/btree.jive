funk get_right(node) {
    return node[2];
}

funk get_left(node) {
    return node[1];
}

funk get_value(node) {
    return node[0];
}


funk create_node(val) {
    return [val, [], []];
}


funk add(root, new_val) {
    if (root) == nil {
        return create_node(new_val);
    }

    if len(root) == 0 {
        return create_node(new_val);
    }

    make current_val = get_value(root);

    if current_val > new_val {
        return [current_val, add(get_left(root), new_val), get_right(root)];
    }
    
    return [current_val, get_left(root), add(get_right(root), new_val)];
}

funk print_tree(root, level) {
    if root == nil {
        return;
    }

    if len(root) == 0 {
        return;
    }
   

    make tab_string = "";
    for i in range_to(level) {
        tab_string = tab_string + " ";
    }


    print_tree(get_left(root), level + 1);
    println(tab_string, get_value(root));
    print_tree(get_right(root), level + 1);
}

funk main() {
    make root;
    while (true) {
        print "enter a number to add to the tree";
        make number = to_number(input());
        root = add(root, number);
        print_tree(root, 0);
    }
}


main();