funk create_node(val) {
    return {val: val, left: nil, right: nil,};
}


funk add(root, new_val) {
    if (root) == nil {
        return create_node(new_val);
    }

    make current_val = root.val;

    if current_val > new_val {

        return {
            val: current_val,
            left: add(root.left, new_val),
            right: root.right,
        };
    }
    
    return {
        val: current_val,
        left: root.left,
        right: add(root.right, new_val),
    };
}

funk print_tree(root, level) {
    if root == nil {
        return;
    }

    make tab_string = "";
    for i in range_to(level) {
        tab_string = tab_string + " ";
    }


    print_tree(root.left, level + 1);
    println(tab_string, root.val);
    print_tree(root.right, level + 1);
}

funk main() {
    make root;
    while (true) {
        print "enter a number to add to the tree";
        make number = to_number(input());
        root = add(root, number);
        print_tree(root, 0);
    }
}




make foobar = {
    hello: "hello",
    world: "world",
};

funk print_foobar(foobar) {
    println(foobar.hello, " ", foobar.world);
}


print_foobar(foobar);

foobar.world = "cole";

print_foobar(foobar);

main();