print 7 * 2 + 3; 
make x = 3;
make y = 4;
make z = nil;
print y + x;
make z;
print z;
z = 12;
print z;
make r;
r = 4;
print r;
make foo = 4;
print foo;
make bar;
print bar;
{
    print "Inside block";
    make x = 6;
    make y = 8;
    print x + y;
    print "Inside block";
}
print "Outside block";
print x + y;

if true 
    print "Inside if";
else 
    print "Inside else";


if false
    print "Inside if";
else 
    print "Inside else";


if 1 < 2
    print "Inside if";
else 
    print "Inside else";

if 1 > 2 
    print "Inside if";
else 
    print "Inside else";

if true print "Inside if";


print "Outside if";

if true {
    print "Inside if x is";
    print x;

    if true {
        print "Inside nested if, making x = 68";
        make x = 68;
        if true {
            print "Inside nested nested if, making x = 69";
            make x = 69;
        }
        print "Outside nested nested if x is";
        print x;
    }

    print "Outside nested if x is";
    print x;
}

print foo;
print bar;


make foo = true;
make foobar = x if foo else y;
print foobar;

make foobar = 1 if false else 2 if true else 3;
print "printing foobar";
print foobar;
make x = y = z = 1;

print "printing x, y, z";

print x;
print y;
print z;

print true and true;
print true and false;
print true or false;
print false or false;
print !true;

{
make x = 0;
    while x < 10 {
        print x;
        x = x + 1;
    }
}

print clock();

println("Hello there ", 3);

make foo = 3;

funk foo(x, y)  {
    println("Inside foo", x, y);
}

foo(3, 4);

funk get_input() {
    input();
}

funk recurse(i) {
    print i + 1;
}

recurse(2);

funk ret() {
    if true {
        if true {
            if true {
                if true {
                    return 1;
                }
                return 2;
            }
            return 3;
        }
        return 4;
    }
    return 5;
}

println('ret: ', ret());


funk closure() {
    make x = 0;
    funk increment() {
        x = x + 1;
        print x;
    }
    return increment;
}

make inc = closure();

make x = 100;
inc();
inc();
inc();


funk mult_by(x) {
    funk mult(y) {
        return x * y;
    }
    return mult;
}

make mult_by_2 = mult_by(2);
make mult_by_3 = mult_by(3);

print mult_by_2(3);
print mult_by_3(3);


// testing scopes

make a = "global";
{
    funk show_a() {
        print a;
    }

    show_a();

    make a = "block";

    show_a();
}

make x = "foobar shoebar";

funk show_x() {
    print x;
}

show_x();

x = "you should see this";

show_x();

with 1 + 2 + 4 as x {
    print x;
}


funk get_val() {
    return 4;
}

with get_val() as val {
    println("the val is: ", val);
}


funk get_callback() {
    funk callback() {
        return 4;
    }

    return callback;
}

print get_callback()();


make x = [1,2,3];

print x;

println(x);

